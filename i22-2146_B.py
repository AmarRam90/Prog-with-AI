import numpy as np
from PIL import Image

#Q1
inp = Image.open(r"C:/Users/Arham Shakeel/Desktop/FastUniversity/3rdSemester/Prog with AI/fr_jpg.jpg")
inp

inp = np.array(inp)
inp

#The lower and Upper bounds for the green color in RGB format, basically the range of the green color:
#35, 100, 65
#90,255,255
lower_bound_for_the_green_color = np.array([35, 50, 35])
upper_bound_for_the_green_color = np.array([90, 255, 90])

#Creating a Mask for the green screen:
#The purpose of the mask is to tell the computer which parts of the image belong to the green screen and which parts belong to the girl
#A Mask is like a layer which we place atop our image
mask_for_green_screen = (inp<=upper_bound_for_the_green_color) & (inp >= lower_bound_for_the_green_color)
mask_for_green_screen

news = Image.open(r"C:/Users/Arham Shakeel/Desktop/FastUniversity/3rdSemester/Prog with AI/bg_jpg.jpg")
news
news = np.array(news)

#Extracting the girl from the fr_jpg picture:
girl = np.copy(inp)
girl[mask_for_green_screen] =news[mask_for_green_screen]
girl

#Placing the girl on the new_bg picture:
final_image_after_photoshop = np.copy(news)
#Inverts the mask
final_image_after_photoshop[~mask_for_green_screen] = girl[~mask_for_green_screen]

#Displaying the end result
res_img = final_image_after_photoshop
res_img =Image.fromarray(res_img)
res_img.save('Final_img.jpg')
res_img

#Q2


data = np.array([[5378.0, 3270.0, 8750.0, 1989.0, 5961.0, 1560.0],
 [9357.0, 4379.0, 6068.0, 6608.0, 233.0, 4060.0],
 [4987.0, 9102.0, 3358.0, 8268.0, 9201.0, 1331.0],
 [2860.0, 1450.0, 800.0, 4621.0, 5203.0, 6473.0],
 [9213.0, 9550.0, 7334.0, 8094.0, 2622.0, 8032.0],
 [6799.0, 1010.0, 289.0, 2822.0, 1332.0, 6772.0],
 [9329.0, 1426.0, 709.0, 8300.0, 6684.0, np.nan],
 [1039.0, 720.0, 5781.0, 9407.0, 9304.0, 2636.0],
 [2316.0, 8180.0, 2151.0, 1652.0, 9211.0, 8577.0],
 [8455.0, 9877.0, 6850.0, np.nan, 2836.0, 5118.0],
 [7370.0, 5975.0, 16.0, 3451.0, 1371.0, 6833.0],
 [9385.0, 1643.0, 5142.0, 290.0, 5278.0, 314.0],
 [3753.0, 161.0, 1004.0, 5540.0, 2493.0, 8677.0],
 [3719.0, 6244.0, 3962.0, 3725.0, 3518.0, 7853.0],
 [5973.0, 9060.0, 3534.0, 9262.0, 4837.0, 4490.0],
 [5812.0, 8082.0, 5862.0, 9305.0, 9441.0, 2043.0],
 [3665.0, 3947.0, 1099.0, 9535.0, 1024.0, 7376.0],
 [9125.0, 2640.0, 4025.0, 8901.0, 4778.0, 809.0],
 [5061.0, 8913.0, 1178.0, 6410.0, 5458.0, 5300.0],
 [np.nan, 3440.0, 5737.0, 8827.0, 2875.0, 8550.0],
 [7437.0, 1044.0, 761.0, 2185.0, 7865.0, 5419.0],
 [603.0, 9742.0, 2894.0, 3403.0, 465.0, 2732.0],
 [7092.0, 3971.0, 9496.0, 3775.0, 6969.0, 9624.0],
 [9472.0, 1692.0, 3940.0, 143.0, 1809.0, 3371.0],
 [9441.0, 7448.0, 7459.0, 9870.0, 1281.0, np.nan],
 [565.0, 8754.0, 3775.0, 9277.0, 6921.0, 4271.0],
 [4567.0, 8369.0, 8172.0, 9068.0, 966.0, 2070.0],
 [8934.0, 186.0, 8529.0, 9102.0, 6292.0, 870.0],
 [3832.0, 3740.0, 6837.0, 5562.0, 2877.0, 2985.0],
 [4658.0, 4019.0, 8636.0, 4281.0, 4434.0, 5496.0],
 [6401.0, 8314.0, 3557.0, 6683.0, 9611.0, 9860.0],
 [1846.0, 9327.0, 1558.0, 7419.0, 6105.0, 5871.0],
 [2734.0, 3561.0, 6233.0, 6270.0, 1843.0, 8299.0],
 [3608.0, 422.0, 5850.0, 2126.0, 20.0, 482.0],
 [8079.0, 5924.0, 9318.0, 4215.0, 7204.0, 777.0],
 [8909.0, 7880.0, 3287.0, 5747.0, 210.0, 8466.0],
 [8785.0, 5600.0, 1771.0, 5509.0, 7368.0, 7857.0],
 [6230.0, 5517.0, 5331.0, 9229.0, 4307.0, 7345.0],
 [3669.0, 6166.0, 7957.0, 8770.0, 6358.0, 3256.0],
 [9622.0, 9352.0, 9444.0, 4602.0, 1908.0, 6517.0],
 [436.0, 7855.0, 8702.0, 6852.0, 9705.0, 3122.0],
 [5334.0, 8402.0, 9128.0, 1959.0, 91.0, 4740.0],
 [1398.0, 3219.0, 5000.0, 3825.0, 3045.0, 9669.0],
 [3043.0, 4899.0, 3662.0, 2460.0, 5819.0, 5707.0],
 [5329.0, 9287.0, np.nan, 2120.0, 5137.0, 4015.0],
 [4636.0, 9156.0, 812.0, 8901.0, 3665.0, 4521.0],
 [5091.0, 6086.0, 3780.0, 4268.0, 4584.0, 5730.0],
 [5745.0, 1441.0, 7950.0, 4652.0, 9409.0, 8294.0],
 [6040.0, 3861.0, 6831.0, 7631.0, 4725.0, 9996.0],
 [4270.0, 1882.0, 4867.0, 5060.0, 1161.0, 4681.0],
 [4442.0, 4785.0, 2144.0, 2923.0, 1447.0, 4691.0],
 [8793.0, 5589.0, 7906.0, 6210.0, 2811.0, 8489.0],
 [7253.0, 9813.0, 7018.0, 646.0, 9744.0, 4196.0],
 [5603.0, 4465.0, 8728.0, 220.0, 5060.0, 7620.0],
 [np.nan, 6553.0, np.nan, 2046.0, 5279.0, 4607.0],
 [5590.0, 7855.0, 2687.0, 5421.0, 616.0, 150.0],
 [726.0, 9151.0, 4897.0, 5149.0, 2205.0, 9978.0],
 [8666.0, 1764.0, np.nan, 6613.0, 1931.0, 1280.0],
 [4143.0, 349.0, 5865.0, 6441.0, 6188.0, 4147.0],
 [1504.0, 1616.0, 1811.0, 3000.0, 7805.0, 9234.0],
 [3009.0, 6272.0, 2645.0, 6909.0, 4915.0, 6313.0],
 [1298.0, 4942.0, 7697.0, 8870.0, 9027.0, 512.0],
 [2245.0, 1055.0, 9102.0, 3768.0, 3429.0, 473.0],
 [366.0, 2687.0, 9004.0, 6661.0, 1747.0, 1517.0],
 [1809.0, 7106.0, 6034.0, 7997.0, 5874.0, 1456.0],
 [7826.0, 9611.0, 8905.0, 2426.0, 7587.0, 7345.0],
 [622.0, 1948.0, 8370.0, 5511.0, np.nan, 9542.0],
 [3246.0, 5986.0, 4237.0, 8876.0, 2670.0, np.nan],
 [6696.0, 6175.0, 6200.0, 2173.0, 2506.0, 3715.0],
 [5280.0, 4054.0, 7367.0, 5598.0, 532.0, 9798.0],
 [8767.0, 3290.0, 6135.0, 2970.0, 7836.0, 1898.0],
 [2243.0, 1966.0, 5809.0, 20.0, 7109.0, 3181.0],
 [5588.0, 6028.0, 4108.0, 1250.0, 4274.0, 3348.0],
 [3673.0, 4420.0, 7276.0, 7718.0, 909.0, 579.0],
 [4517.0, 5331.0, 4989.0, 2695.0, 5837.0, 6175.0],
 [1494.0, 2403.0, 7754.0, 1588.0, 1456.0, 2494.0],
 [4686.0, 5175.0, 9329.0, 9969.0, 6967.0, 3301.0],
 [5039.0, 7266.0, 3476.0, 7503.0, 6750.0, 7272.0],
 [6257.0, 7783.0, 9059.0, 7156.0, 4403.0, 3157.0],
 [4724.0, 3728.0, 2674.0, 2742.0, 1269.0, 3626.0],
 [538.0, 4533.0, 6767.0, 9812.0, 2063.0, 9247.0],
 [543.0, 7702.0, 9877.0, 7095.0, 7912.0, 4623.0],
 [663.0, 8945.0, 1047.0, 9931.0, 1171.0, 3150.0],
 [220.0, 7276.0, 8550.0, 5838.0, 3123.0, 1654.0],
 [np.nan, 5673.0, 5371.0, 3779.0, 1925.0, 3811.0],
 [3850.0, 6743.0, 2757.0, np.nan, 9693.0, 5551.0],
 [9879.0, 663.0, 1969.0, 7625.0, 9336.0, 3753.0],
 [4950.0, 4745.0, 9351.0, 1004.0, 236.0, 4381.0],
 [3855.0, 4835.0, 2471.0, 5524.0, 5288.0, 7074.0],
 [3576.0, 8018.0, 2374.0, 3213.0, 8535.0, 8442.0],
 [7122.0, 2731.0, 2451.0, 1638.0, 9822.0, 4937.0],
 [6196.0, 6673.0, 4475.0, 327.0, 5973.0, 4304.0],
 [3096.0, 4856.0, 3453.0, 6901.0, 8729.0, 8322.0],
 [9515.0, 6862.0, 6741.0, 1849.0, 9432.0, 5373.0],
 [2514.0, 9377.0, 357.0, 1384.0, 7430.0, 7056.0],
 [3616.0, 7366.0, 4282.0, 5523.0, 2126.0, 5584.0],
 [9355.0, np.nan, 3196.0, 3574.0, 1645.0, 2441.0],
 [9095.0, 6238.0, 7991.0, 7775.0, 306.0, 5797.0],
 [2355.0, np.nan, 1640.0, 5557.0, 4936.0, 8261.0],
 [3244.0, 1064.0, 5585.0, 1815.0, 3344.0, 7653.0],
 [1587.0, 3406.0, 6866.0, 9957.0, 8208.0, 2791.0],
 [8367.0, 4962.0, 6397.0, 4719.0, 736.0, 5050.0],
 [5556.0, 2218.0, 5927.0, 3946.0, 910.0, 8539.0],
 [630.0, 4416.0, 6177.0, 7251.0, 1885.0, 7981.0],
 [7179.0, 2413.0, 1428.0, 5325.0, 4324.0, 2626.0],
 [855.0, 4322.0, 8878.0, 911.0, 1010.0, 221.0],
 [34.0, 1291.0, 5639.0, np.nan, 8253.0, 3111.0],
 [7944.0, 4547.0, 464.0, 9727.0, 6482.0, 6512.0],
 [2421.0, 6390.0, 8060.0, 9731.0, 7510.0, 9890.0],
 [3723.0, 9794.0, 7209.0, 7798.0, 8985.0, 3726.0],
 [8916.0, 1693.0, 2655.0, 252.0, 4443.0, 229.0],
 [8292.0, 7318.0, np.nan, 1324.0, np.nan, 5538.0],
 [4193.0, 6481.0, 8880.0, 3916.0, 7992.0, 5151.0],
 [8371.0, 322.0, 472.0, 3766.0, 7910.0, 3465.0],
 [8647.0, 4654.0, 4844.0, 2612.0, 8152.0, 9193.0],
 [5250.0, 8575.0, 7171.0, 1439.0, 2270.0, 2356.0],
 [5493.0, 7398.0, 2800.0, 9500.0, 2530.0, 2699.0],
 [7471.0, 7655.0, 2427.0, 6111.0, 6338.0, 4153.0],
 [2512.0, 6595.0, 6750.0, 1925.0, 7663.0, 2536.0],
 [9306.0, 8549.0, 431.0, 6249.0, 7466.0, 1903.0],
 [5782.0, 5838.0, 4655.0, 8689.0, 3999.0, 4200.0],
 [3787.0, 623.0, 3841.0, 8807.0, 9842.0, 4235.0],
 [2211.0, 3191.0, 2408.0, 1529.0, 980.0, 4576.0],
 [6939.0, 2082.0, 2174.0, 6277.0, 8048.0, 8710.0],
 [8242.0, 7623.0, 2294.0, 259.0, 8257.0, 2156.0],
 [5061.0, np.nan, 7308.0, 2882.0, 5397.0, 6269.0],
 [9917.0, 3371.0, 4464.0, 6415.0, 9891.0, 2488.0],
 [2656.0, 9622.0, 5473.0, 2393.0, 3223.0, 3283.0],
 [8326.0, 9015.0, 9850.0, 2483.0, 5951.0, 9228.0],
 [6042.0, 3513.0, 2351.0, 1708.0, 1987.0, 9928.0],
 [7717.0, 8331.0, 8547.0, 8262.0, 431.0, 7375.0],
 [8568.0, 3308.0, 515.0, 6604.0, 4390.0, 1060.0],
 [7035.0, 8978.0, 1644.0, 6023.0, np.nan, 2637.0],
 [1208.0, 5877.0, 4855.0, 9656.0, np.nan, 500.0],
 [2217.0, 5538.0, 2825.0, 1125.0, 3645.0, 745.0],
 [5175.0, 7931.0, 7691.0, 4154.0, 1355.0, 7476.0],
 [163.0, 2029.0, 3659.0, 4244.0, 6799.0, np.nan],
 [4161.0, 5437.0, 9804.0, 6485.0, 6364.0, 2258.0],
 [5366.0, 2335.0, 8638.0, 3262.0, 2945.0, 1052.0],
 [637.0, 7318.0, 199.0, 5624.0, 2429.0, 8313.0],
 [738.0, 1155.0, 9985.0, 5299.0, 7629.0, 3423.0],
 [3656.0, 5115.0, 2518.0, 4227.0, 5280.0, 8336.0],
 [2515.0, 917.0, 7193.0, 8367.0, 5072.0, 5664.0],
 [7284.0, 6070.0, 8626.0, 7299.0, 464.0, 6163.0],
 [354.0, 8069.0, 1956.0, 3657.0, 8279.0, 1846.0],
 [7115.0, 8521.0, 3085.0, 9565.0, 9805.0, 8043.0],
 [1865.0, 7789.0, 7524.0, np.nan, 3935.0, 6420.0],
 [3362.0, 9175.0, 7885.0, 5313.0, 5579.0, 4861.0],
 [5391.0, 3288.0, 6656.0, 1239.0, 2934.0, 8113.0],
 [1021.0, 6110.0, 4229.0, 5362.0, 479.0, 3284.0],
 [1096.0, 6475.0, 1687.0, 934.0, 8379.0, 8333.0],
 [5448.0, 1677.0, 6992.0, 7304.0, 1750.0, 6073.0],
 [np.nan, 8184.0, 7301.0, 1968.0, 7932.0, 127.0],
 [4279.0, 7206.0, 7280.0, 7668.0, 3153.0, 616.0],
 [7484.0, 4271.0, 1155.0, 5261.0, np.nan, 2870.0],
 [800.0, 1539.0, 4431.0, 1726.0, 6664.0, 4934.0],
 [1444.0, 6762.0, 5345.0, 2831.0, 2320.0, 1470.0],
 [5047.0, 7132.0, 1986.0, 4246.0, 8452.0, 5813.0],
 [9004.0, 9932.0, 3809.0, 1944.0, 1323.0, 2064.0],
 [8809.0, 8876.0, 3038.0, 1027.0, 6990.0, 6681.0],
 [2658.0, 4084.0, 6903.0, 4250.0, 6352.0, np.nan],
 [9443.0, 2787.0, 5737.0, 4289.0, 161.0, 7057.0],
 [4086.0, 5070.0, 9236.0, 5418.0, 9538.0, 9733.0],
 [4007.0, 6566.0, 5886.0, 4894.0, 1493.0, 670.0],
 [8087.0, 2103.0, np.nan, 9251.0, 6864.0, 3408.0],
 [5187.0, 8193.0, 8174.0, 7064.0, 3195.0, 4408.0],
 [3628.0, 3435.0, 6634.0, 3876.0, 47.0, 2978.0],
 [3823.0, 2011.0, 3701.0, 951.0, 98.0, 9169.0],
 [4137.0, 7224.0, 5389.0, 142.0, 7583.0, 9070.0],
 [7859.0, 5420.0, 1778.0, 6681.0, 6576.0, 5912.0],
 [3120.0, 802.0, 1961.0, 8658.0, 833.0, 5982.0],
 [7160.0, 8742.0, 8718.0, 9189.0, 8385.0, 6735.0],
 [5606.0, 6997.0, 3467.0, 1147.0, 5865.0, 4257.0],
 [9532.0, 5234.0, 4338.0, 7838.0, 8052.0, 5111.0],
 [6762.0, 1666.0, 5283.0, 9029.0, 9343.0, 154.0],
 [1805.0, 1392.0, 3327.0, 8706.0, 853.0, 7635.0],
 [9363.0, 8935.0, 7346.0, 8652.0, 1235.0, 6677.0],
 [5752.0, 9751.0, 5868.0, 966.0, 1920.0, 1447.0],
 [477.0, 6493.0, 2060.0, 6522.0, 6495.0, 2373.0],
 [9864.0, 7347.0, 5949.0, 3752.0, 2459.0, 2277.0],
 [8950.0, 9046.0, 8447.0, 572.0, 3607.0, 8038.0],
 [565.0, 6015.0, 6915.0, 3756.0, 7046.0, 6946.0],
 [9601.0, 3001.0, 6917.0, 1397.0, 7267.0, 6926.0],
 [7199.0, 9030.0, 9494.0, 4252.0, 3657.0, 1024.0],
 [7957.0, 6268.0, 20.0, 8887.0, 7027.0, 3178.0],
 [2952.0, 7377.0, 9113.0, 5193.0, 9660.0, 5211.0],
 [1306.0, np.nan, 4766.0, 8259.0, 8884.0, 3892.0],
 [3134.0, 5218.0, 3030.0, 7453.0, 2651.0, 6501.0],
 [7189.0, 8268.0, 5128.0, 8226.0, 1993.0, 3473.0],
 [8539.0, 5465.0, 4436.0, 5835.0, 1871.0, 9062.0],
 [np.nan, 5589.0, 3210.0, 9284.0, 1251.0, 6376.0],
 [5100.0, 6975.0, 7466.0, 3672.0, 5032.0, 6714.0],
 [1743.0, 2187.0, 719.0, 3277.0, 4865.0, 5021.0],
 [3241.0, 9498.0, 1643.0, 3598.0, 9058.0, np.nan],
 [8117.0, 3781.0, 6278.0, 4881.0, 9166.0, 5664.0],
 [1644.0, 5897.0, 1752.0, 6808.0, 1159.0, 1714.0],
 [9327.0, 9068.0, 8762.0, 1117.0, 4940.0, 7690.0],
 [8967.0, 3428.0, 7247.0, 8197.0, 2166.0, 3741.0],
 [1637.0, 7303.0, 9022.0, 7813.0, 1511.0, 156.0],
 [2939.0, 7464.0, 8460.0, 7184.0, 2809.0, 2482.0],
 [5192.0, 6296.0, np.nan, 66.0, 9922.0, 7282.0],
 [1321.0, 8214.0, 6516.0, 1059.0, 9610.0, 494.0],
 [872.0, 6122.0, 2319.0, 289.0, 7401.0, 1552.0],
 [2042.0, 4197.0, 4151.0, 1558.0, 5362.0, 3167.0],
 [6216.0, 9748.0, 4793.0, 7982.0, 8412.0, 6974.0],
 [3056.0, 3180.0, 1099.0, 4571.0, np.nan, 9435.0],
 [6894.0, 6247.0, 6399.0, 297.0, 5361.0, 3002.0],
 [6073.0, 8004.0, 215.0, np.nan, 8565.0, 5060.0],
 [7191.0, 4138.0, 8858.0, np.nan, 4319.0, 7760.0],
 [7279.0, 5818.0, 1433.0, 5600.0, 4392.0, 2783.0],
 [6260.0, 3014.0, 3974.0, 6942.0, 7698.0, 5481.0],
 [8543.0, 6004.0, 864.0, 9556.0, 2181.0, 4879.0],
 [873.0, 9198.0, 5036.0, 3160.0, 3572.0, 4478.0],
 [np.nan, 6997.0, 1418.0, 2854.0, 7058.0, 8936.0],
 [1895.0, 4453.0, 3070.0, np.nan, 5087.0, 8139.0],
 [5319.0, 1343.0, 8092.0, 3140.0, 4542.0, 8969.0],
 [3659.0, 449.0, 5602.0, 3201.0, 4121.0, 2038.0],
 [5386.0, 4130.0, 7266.0, 4601.0, 5433.0, 1387.0],
 [9491.0, 1266.0, 8508.0, 9670.0, np.nan, 7985.0],
 [9242.0, 5610.0, 6086.0, 7165.0, 9012.0, 2463.0],
 [2388.0, 282.0, 1049.0, 4706.0, 4050.0, 5536.0],
 [709.0, 9241.0, 9954.0, 1756.0, 7164.0, 6997.0],
 [6142.0, 3731.0, 5562.0, 7918.0, 9918.0, 7036.0],
 [21.0, 3633.0, 9264.0, 4073.0, 1873.0, 7357.0],
 [8115.0, 3863.0, 8851.0, 4198.0, 9298.0, 1390.0],
 [8356.0, 3599.0, 96.0, 4818.0, 525.0, 748.0],
 [7572.0, 2793.0, 3567.0, 706.0, 3157.0, 4188.0],
 [7434.0, 8821.0, 8008.0, 7615.0, 8115.0, 6705.0],
 [3187.0, 1319.0, 1530.0, 1936.0, 6024.0, 7860.0],
 [3452.0, 7253.0, 2046.0, 2923.0, 462.0, 6191.0],
 [3825.0, 2546.0, 9093.0, 2445.0, 486.0, 8739.0],
 [328.0, 4394.0, 9785.0, 1737.0, 1137.0, 3604.0],
 [5398.0, 2489.0, 8134.0, 8912.0, 9743.0, 5947.0],
 [9375.0, 3379.0, 1147.0, 3392.0, 3344.0, 6531.0],
 [2152.0, 785.0, 2996.0, 6509.0, 4858.0, 8462.0],
 [9101.0, 8207.0, 8944.0, 1526.0, 5778.0, 4668.0],
 [99.0, 4348.0, 8889.0, 2921.0, 2464.0, 3542.0],
 [7744.0, 6192.0, 4372.0, 643.0, 2630.0, 7295.0],
 [6202.0, 8300.0, 1897.0, 3716.0, 3761.0, 1936.0],
 [8179.0, 9530.0, 6319.0, 168.0, 7617.0, 4777.0],
 [5094.0, 3350.0, 9356.0, 9713.0, 5813.0, 367.0],
 [8608.0, 4402.0, 3083.0, 7236.0, 8733.0, 1656.0],
 [2957.0, 3761.0, 1434.0, 239.0, 1677.0, 4758.0],
 [5881.0, 5544.0, 7228.0, 7592.0, 129.0, 6626.0],
 [7513.0, 7896.0, 2970.0, 9397.0, 5860.0, 5585.0],
 [7630.0, np.nan, 2176.0, 8111.0, 8558.0, 1766.0],
 [2791.0, 8633.0, 3329.0, 5269.0, 8602.0, 4158.0],
 [7720.0, 7678.0, 4635.0, 7620.0, 8886.0, 80.0],
 [1695.0, 4361.0, 4065.0, 1321.0, 187.0, 316.0],
 [390.0, 9664.0, 7428.0, 6226.0, 1517.0, 1869.0],
 [5808.0, 2.0, 3699.0, 6895.0, 8510.0, 5663.0],
 [2570.0, 5126.0, 5574.0, 1044.0, 6872.0, 653.0],
 [1140.0, 2654.0, 9913.0, 3315.0, 7753.0, 9974.0],
 [1007.0, 8469.0, 572.0, 6908.0, 8808.0, 9731.0],
 [6849.0, 822.0, 8059.0, 9530.0, 1205.0, 5877.0],
 [888.0, 581.0, 4777.0, np.nan, 7159.0, 9734.0],
 [517.0, 933.0, 7423.0, 9413.0, 459.0, 8537.0],
 [6144.0, 5467.0, 6858.0, 9209.0, 7606.0, 9471.0],
 [3479.0, 4220.0, 3001.0, 2398.0, 4249.0, 9174.0],
 [8046.0, 9620.0, 5934.0, 867.0, 2518.0, 8201.0],
 [3799.0, 1385.0, 764.0, 7544.0, 705.0, 1185.0],
 [5559.0, 5483.0, 9646.0, 2106.0, 237.0, 4647.0],
 [8355.0, 9071.0, np.nan, 8756.0, 6333.0, 5299.0],
 [np.nan, 4004.0, 5869.0, 8278.0, 1399.0, 6073.0],
 [1186.0, 8935.0, 5884.0, 1766.0, 7212.0, 3361.0],
 [1478.0, 9160.0, 6985.0, 7156.0, 4984.0, 9091.0],
 [3415.0, 6916.0, 5405.0, 4213.0, 989.0, 6733.0],
 [6557.0, 9250.0, 8808.0, 9466.0, 2816.0, 6139.0],
 [5922.0, 8432.0, 8509.0, 718.0, 1980.0, 8980.0],
 [9666.0, 243.0, 289.0, 5913.0, 1417.0, 7034.0],
 [3919.0, 5485.0, 47.0, 5676.0, 9621.0, 3146.0],
 [6308.0, 6846.0, 6702.0, 3075.0, 9912.0, 4970.0],
 [3439.0, 2563.0, 7507.0, 5252.0, 7952.0, 6560.0],
 [1201.0, 5217.0, 7841.0, 9907.0, 3847.0, 4319.0],
 [3967.0, 8167.0, 9243.0, 8861.0, 6818.0, 6816.0],
 [7457.0, 9708.0, 9933.0, 9673.0, 1027.0, 5118.0],
 [4153.0, 4855.0, 9942.0, 559.0, 7089.0, 4241.0],
 [836.0, 8683.0, 7882.0, 457.0, 1241.0, 9154.0],
 [9946.0, 2848.0, 2554.0, 4356.0, 5528.0, 1161.0],
 [7061.0, 8308.0, 9922.0, 9973.0, 7098.0, 8925.0],
 [6128.0, 4428.0, 4320.0, 1423.0, 3814.0, 7275.0],
 [3478.0, 1752.0, 8580.0, 6316.0, 3391.0, 1559.0],
 [5107.0, 5612.0, np.nan, 663.0, 4769.0, 6922.0],
 [6310.0, 4420.0, 8653.0, 1721.0, 8384.0, 2234.0],
 [4234.0, 5769.0, 688.0, 9034.0, 1318.0, 8898.0],
 [6786.0, np.nan, 1310.0, 3586.0, 6349.0, 1257.0],
 [3219.0, 984.0, 7858.0, 185.0, 2851.0, 1306.0],
 [6690.0, 3099.0, np.nan, 8747.0, 7687.0, 3381.0],
 [1362.0, 1407.0, 2872.0, 8157.0, 5654.0, 2740.0],
 [np.nan, 3915.0, 4783.0, 3947.0, 9968.0, 7843.0],
 [6167.0, 9441.0, 5340.0, 4564.0, 1964.0, 5540.0],
 [1481.0, 4725.0, 6884.0, 4170.0, 8178.0, 465.0],
 [4633.0, 8281.0, 1590.0, 7072.0, 2457.0, 8352.0],
 [9546.0, 4472.0, 4340.0, 6362.0, 5746.0, 284.0],
 [2439.0, 3897.0, 5229.0, 1083.0, 2030.0, 7518.0],
 [730.0, 4165.0, 5149.0, 9080.0, 9176.0, 941.0],
 [2381.0, 995.0, 2214.0, 4756.0, 7806.0, 2771.0],
 [4204.0, 3346.0, 3541.0, 4911.0, 2823.0, 1525.0],
 [7124.0, 3986.0, 3548.0, 6225.0, 7665.0, 823.0],
 [1785.0, 5124.0, 8218.0, 5952.0, 5977.0, 1531.0],
 [4137.0, 9272.0, 1217.0, 1308.0, 7306.0, 8492.0],
 [2564.0, 3224.0, 8020.0, 7460.0, 6084.0, 4108.0],
 [5914.0, 7729.0, 6106.0, 1044.0, 5263.0, 4048.0],
 [9872.0, 9243.0, 8998.0, 2074.0, 6048.0, 1226.0],
 [5943.0, 666.0, 1292.0, 6333.0, 9625.0, 9311.0],
 [1957.0, 1674.0, 6266.0, 7401.0, np.nan, 4301.0],
 [3886.0, 5299.0, 9316.0, 2302.0, 126.0, 2193.0],
 [4276.0, 1772.0, 6415.0, 88.0, 92.0, 7963.0],
 [603.0, 5413.0, 8899.0, 3597.0, 1815.0, 5834.0],
 [577.0, 3783.0, 1758.0, 6515.0, 4753.0, 1797.0],
 [9911.0, 7487.0, 5022.0, 5548.0, 1989.0, 9868.0],
 [9335.0, 4305.0, 3831.0, 1867.0, 8869.0, 5297.0],
 [7421.0, 6963.0, 3016.0, 6518.0, 9332.0, np.nan],
 [77.0, 8528.0, 35.0, 120.0, 3585.0, 3111.0],
 [6759.0, 2363.0, 6610.0, 6899.0, 3229.0, 615.0],
 [6375.0, 6414.0, 8097.0, 461.0, 3108.0, 3199.0],
 [7318.0, 3082.0, 8365.0, 1510.0, 7176.0, 4869.0],
 [3634.0, 437.0, 3648.0, 8558.0, 9390.0, 8020.0],
 [6044.0, 4972.0, 4127.0, 7811.0, 5242.0, np.nan],
 [3245.0, 2402.0, 752.0, 3156.0, 8157.0, 4017.0],
 [4315.0, 3322.0, 339.0, 6110.0, 6261.0, 6511.0],
 [3577.0, 4822.0, 9506.0, 3162.0, 4400.0, 1554.0],
 [4940.0, 562.0, 4506.0, 1139.0, 6982.0, 6623.0],
 [8945.0, 5736.0, 3751.0, 4374.0, 7638.0, 1953.0],
 [396.0, 8323.0, 2961.0, 1934.0, 4502.0, 4354.0],
 [5333.0, 9308.0, 8810.0, 2466.0, 7285.0, 5116.0],
 [4489.0, 4311.0, 174.0, 9412.0, 7469.0, 3498.0],
 [np.nan, 2550.0, 7498.0, 5325.0, 4143.0, 281.0],
 [1180.0, 1418.0, 7253.0, 5475.0, 6224.0, 693.0],
 [8671.0, 9880.0, 411.0, 9304.0, 9666.0, 9796.0],
 [7407.0, 8153.0, 4336.0, 9107.0, 9145.0, 1494.0],
 [7179.0, 4194.0, 7820.0, 3488.0, 3143.0, 9629.0],
 [2419.0, 755.0, 8918.0, 8999.0, 6062.0, 7101.0],
 [1357.0, 4096.0, 3572.0, 7868.0, 8743.0, 5336.0],
 [7363.0, 3752.0, 4230.0, 8162.0, 2640.0, 4972.0],
 [3720.0, 2305.0, 8360.0, 3099.0, 3079.0, 7147.0],
 [9885.0, 8638.0, 5618.0, 6206.0, 1752.0, 5901.0],
 [442.0, 5867.0, 1303.0, 3807.0, 3646.0, 9227.0],
 [9022.0, 5169.0, 5051.0, 6454.0, 7725.0, 1186.0],
 [3564.0, 2554.0, 8129.0, 7448.0, 3260.0, 5712.0],
 [8451.0, 1644.0, 3238.0, 4270.0, 9935.0, 4108.0],
 [5566.0, 5841.0, 9257.0, 2882.0, 128.0, 5491.0],
 [8648.0, 3545.0, 7867.0, 778.0, 2647.0, 560.0],
 [504.0, 488.0, 5.0, 3911.0, 4693.0, 4770.0],
 [3998.0, 9168.0, 3175.0, 4621.0, 1773.0, 5493.0],
 [3365.0, 9179.0, 6544.0, 7699.0, 2406.0, 4877.0],
 [8940.0, 4422.0, 3143.0, 3586.0, 4738.0, 6743.0],
 [4804.0, 9077.0, 4293.0, 7788.0, 3548.0, 123.0],
 [8793.0, 9492.0, 9132.0, 82.0, 7384.0, 4930.0],
 [972.0, 5822.0, 3221.0, 596.0, 9846.0, 6738.0],
 [9590.0, 4584.0, 4254.0, 9367.0, 6783.0, 3515.0],
 [2382.0, 1581.0, 7690.0, 2974.0, 9344.0, 8172.0],
 [9548.0, np.nan, 2970.0, 6210.0, 1663.0, 7616.0],
 [4294.0, 4992.0, 8733.0, 7966.0, 553.0, 8219.0],
 [2693.0, 655.0, 6796.0, 7549.0, 1105.0, 1159.0],
 [1025.0, 9101.0, 8955.0, 4902.0, 5721.0, 3555.0],
 [1128.0, 4340.0, 2653.0, np.nan, 8405.0, 7198.0],
 [3316.0, 7459.0, 7580.0, 9962.0, 9458.0, 9999.0],
 [98.0, 5379.0, 5132.0, 712.0, 8720.0, 2611.0],
 [6501.0, 5624.0, 5539.0, 5122.0, 3782.0, np.nan],
 [3619.0, 4366.0, 7723.0, 4568.0, 2896.0, 5890.0],
 [4207.0, 326.0, 8294.0, 288.0, np.nan, 1520.0],
 [5219.0, 37.0, np.nan, 3220.0, 770.0, 7777.0],
 [7303.0, 254.0, 4937.0, 7090.0, np.nan, 9705.0],
 [9412.0, 6299.0, 2973.0, 1500.0, 4237.0, 8534.0],
 [1371.0, 6199.0, 6300.0, 7305.0, 667.0, 4913.0],
 [9723.0, 949.0, 1999.0, 5938.0, 9161.0, 1422.0],
 [228.0, 2735.0, 862.0, 9793.0, 1040.0, 7020.0],
 [6493.0, 6368.0, 394.0, 1543.0, 6577.0, 3877.0],
 [6557.0, np.nan, 6051.0, 7832.0, 9028.0, 238.0],
 [7656.0, 1166.0, 8285.0, 2905.0, 6303.0, 8462.0],
 [607.0, 4054.0, 8747.0, 7486.0, 5666.0, 7223.0],
 [6813.0, 1450.0, 2832.0, 7845.0, 834.0, 6847.0],
 [7566.0, 8665.0, 8232.0, 2872.0, 9978.0, 2053.0],
 [2191.0, 9625.0, 9594.0, 6679.0, 8522.0, 9440.0],
 [5058.0, 3799.0, 4080.0, 2665.0, 1232.0, 9689.0],
 [2120.0, 3123.0, 7842.0, 4293.0, 580.0, 6197.0],
 [2359.0, np.nan, 1066.0, 6148.0, 9897.0, 9240.0],
 [906.0, 921.0, 3516.0, 3681.0, 8262.0, 574.0],
 [4582.0, 6764.0, 7850.0, 6505.0, 6138.0, 6256.0],
 [3089.0, 1504.0, 71.0, 5844.0, 519.0, 745.0],
 [769.0, 5135.0, 6876.0, 6211.0, 1681.0, 565.0],
 [3152.0, 8949.0, 6122.0, 9255.0, 9939.0, 7004.0],
 [8245.0, 8378.0, 5825.0, 5562.0, 4599.0, 1959.0],
 [3498.0, 6526.0, 5249.0, 125.0, 3790.0, 1077.0],
 [6692.0, 7105.0, 9051.0, 7495.0, 5316.0, 8767.0],
 [5806.0, 3565.0, 46.0, 9164.0, 9697.0, 1790.0],
 [7599.0, 8102.0, 6799.0, np.nan, 1814.0, 4119.0],
 [4798.0, 7450.0, 4567.0, 972.0, 8005.0, 1987.0],
 [3502.0, 4299.0, 9738.0, 440.0, 2361.0, 6335.0],
 [6308.0, 1288.0, 3209.0, 459.0, 9562.0, 8158.0],
 [349.0, 4016.0, 9350.0, 7509.0, 9543.0, 9897.0],
 [6966.0, 7522.0, 1058.0, 5137.0, 9451.0, 5579.0],
 [4795.0, 1642.0, 4967.0, 2587.0, 8541.0, np.nan],
 [9038.0, 3317.0, 871.0, 5155.0, 3276.0, 1019.0],
 [3756.0, 8667.0, 709.0, 381.0, 3507.0, 5172.0],
 [7898.0, 6839.0, 226.0, 9112.0, 9663.0, 4106.0],
 [2911.0, 381.0, 8083.0, 2600.0, 8442.0, 7227.0],
 [np.nan, 5093.0, 1232.0, 9686.0, 285.0, 3056.0],
 [1255.0, 5899.0, 484.0, 9508.0, 8161.0, 9497.0]], dtype=np.float32)

#find max value of each column
max_value_of_each_column = np.nanmax(data,axis=0)
print("Maximum value of each column,excluding all nan values is: ", max_value_of_each_column)

# find min value of each column
min_value_of_each_column = np.nanmin(data,axis=0)
print("Minimum value of each column, excluding all nan values is is: ", max_value_of_each_column)

# find indices of min and max value
indices_of_minimum_values = np.unravel_index(np.argmin(data,axis=None), data.shape)
indices_of_maximum_values = np.unravel_index(np.argmax(data, axis=None), data.shape)
print("The indices of the maximum value is: ",indices_of_maximum_values)
print("The indices of the minimum value is: ",indices_of_minimum_values)

# find the average, std deviation, and variance of each column
mean_of_column = np.nanmean(data,axis=0)
print("The average of each column, excluding all nan values is is: ", mean_of_column)
standard_deviation_of_column = np.nanstd(data,axis=0)
print("The standard deviation of each column, excluding all nan values is: ", standard_deviation_of_column)
variance_of_column = np.nanvar(data,axis=0)
print("The variance of each column, excluding all nan values is is: ", variance_of_column)

# find the sum of each column
sum_of_each_column = np.nansum(data,axis=0)
print("Sum of each column, excluding all nan values is:", sum_of_each_column)

# fill the nan values of frist column with max value of the column
data[:, 0][np.isnan(data[:, 0])] = np.nanmax(data[:, 0])
print(data)

# fill the nan values of 2nd column with min value of the column
minimum_value_of_the_column =np.nanmin(data[:,1])
data[:,1][np.isnan(data[:,1])] = minimum_value_of_the_column
print(data[:,1])

# fill the nan values of 3rd column with avg value of the column
average_value_of_3rd_column = np.nanmean(data[:,2])
data[:,2][np.isnan(data[:,2])] = average_value_of_3rd_column
print(data[:,2])

# fill the nan values of 4rd column with values that come right after the value;
for i in range(len(data)):
    if np.isnan(data[i,3]):
        data[i,3] = data[i+1,3]
print(data[:,3])

# fill the nan values of 5rd column with values that come right before the value
for i in range(len(data)):
    if np.isnan(data[i,4]):
        data[i,4] = data[i-1,4]
print(data[:,4])

# just remove the rows where there is a nan value in the 6th column
data = data[~np.isnan(data[:, 5])]
print(data[:,5])

# Perform zero mean numpy standardization across columns
standardized_data = (data - mean_of_column)/standard_deviation_of_column
print(standardized_data)

# flatten the whole array into a 1d array
flattened_array = data.flatten()
print(flattened_array)

# reshape array back into its original shape
original_shape_of_data_array = data.shape
data = flattened_array.reshape(original_shape_of_data_array)
print(data)

#Q3

spacecraft_position = np.array([500, 200, 100])
planet_names = ["Proxima Centauri b", "Kepler-442b", "Kepler-186f", "TRAPPIST-1 Planets", "Gliese 581g", "Kepler-22b"]
planet_coordinates = np.array([[1000, 800, 500],
                               [700, 300, 200],
                               [900, 600, 800],
                               [1200, 1000, 700],
                               [1500, 1200, 900],
                               [800, 500, 300]])


# Find the nearest habitable planet using the Euclidean distance formula
square_of_distances = np.sum((planet_coordinates - spacecraft_position) **2, axis = 1)
distances_from_each_planet = np.sqrt(square_of_distances)
#print(distances_from_each_planet)

index_of_nearest_planet = np.argmin(distances_from_each_planet)
name_of_nearest_planet = planet_names[index_of_nearest_planet]
distance_of_spacecraft_from_nearest_planet = distances_from_each_planet[index_of_nearest_planet]
print(f"The nearest habitable Planet from the space craft is {name_of_nearest_planet} and it is at a distance of {distance_of_spacecraft_from_nearest_planet} km")

# Now find the angle between the origin planet and each planet in 3d space using numpy functions
vectors_from_the_spacecraft_to_each_planet = planet_coordinates - spacecraft_position
dot_products_of_origin_and_planet_vectors = np.sum(vectors_from_the_spacecraft_to_each_planet * vectors_from_the_spacecraft_to_each_planet[0], axis=1)
magnitude_of_the_planet_vectors = np.linalg.norm(vectors_from_the_spacecraft_to_each_planet, axis=1)
magnitude_of_the_origin_planet_relative_to_the_spacecraft = np.linalg.norm(vectors_from_the_spacecraft_to_each_planet[0])
cosine_values_of_the_angles = dot_products_of_origin_and_planet_vectors / (magnitude_of_the_origin_planet_relative_to_the_spacecraft * magnitude_of_the_planet_vectors)
angle_between_origin_planet_and_each_planet_in_radians = np.arccos(cosine_values_of_the_angles)

for i in range(len(planet_names)):
    if i != 0:
        print("The angle, in radians, between the Origin planet and " + planet_names[i] + " is ", angle_between_origin_planet_and_each_planet_in_radians[i])




































































